582303 Network Programming
==========================

Exercise 4  (due on February 12, 2020):

1. Implement the reader and doubler programs of the task No:4 of
   exercise 3 using datagram sockets (UDP sockets).


2. Most hosts with TCP/IP protocol stack implementation have a server
   called "echo". Implement a TCP client following the client-server
   paradigm so that the client continuously reads a line from standard
   input and sends it to the "echo" TCP server that echoes the line back
   to the client without modifying it in any way. The client prints to
   standard output the lines it receives back and reads the next line
   from standard input only once the previous line has been entirely
   received and printed.

   Apply appropriate functions in your client to convert the service
   name "echo" to the corresponding port number as well as to convert
   the server hostname (DNS name) to the corresponding IP address. Test
   your client using a TCP echo server on host

      np[1-3].cs.helsinki.fi   

   which are the only hosts at the department running "echo" server.


3. Design how two separate processes (A and B) running the shared memory
   program as modified in for Task No: 3 of the exercise 3 are able to
   synchonize so that the processes write their own character in turns
   into the shared character table. The process A writes character 'A'
   and the process B writes character 'B', and the result in the shared
   character table is ABABABABABABAB...

   Note that a simple mutual exclusion solution would allow an arbitrary
   order of the characters.

   Your design should be based on some of the IPC mechanisms covered
   this far on the course (pipe, FIFO, file locks, shared memory), but
   do not use semaphores as they are not covered on this course.
   No code needs to be written for this task, just explain your design
   clearly enough.


4. Implement your design in task No:3 and test that it works. 

   You may assume that process A gets character 'A' and process B gets
   character 'B' as command line argument to identify which one of the
   two processes is executing.


5. How does TCP layer react at a server host when a TCP SYN segment
   arrives at the server but the backlog queue of the listen socket is
   full. How is this visible in the client application that is trying to
   connect the server?


6. Write a simple concurrent TCP echo server and connect to it with your
   own echo client (e.g., you may modify the client in the task No: 2
   above). Select the port number for the server yourself in the range
   50000-51999. The client reads from stdin and delivers the data to the
   server that echoes it back. The client writes the data that it
   receives as reply from the server to sdtout and only then reads the
   next line from stdin.

   a) When the client has connected to the server, kill the master
      (parent) server using an appropriate signal (e.g., SIGINT), but
      make sure that the TCP connection between the client and the
      server child process is still open (client and server are
      running). What happens in the client and what happens at the TCP
      layer?

   b) After killing the master server, restart it immediately (keep the
      previous connection between the client and child server still
      open). What happens in the restarted master server? Why? How
      should you program the server to be prepared to this problem and
      thereby solve it?

   c) Now try the following: when the client has connected to the
      server, kill both the master and child server using an appropriate
      signal (e.g., SIGINT). What happens in the client and what happens
      at the TCP layer? Include appropriate error checking in the
      client.

   d) After killing the servers as instructed above in c), restart
      the master server immediately. What happens now? Why? (Hint: 
      look at the  TCP state diagram on page 41 in Stevens book) 
      How can you program the server to be prepared to this 
      problem and thereby solve it?
